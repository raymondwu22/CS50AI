import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    d = {}
    links = corpus[page]
    random_prob = round(0.15 / len(corpus.keys()),2)

    # If page has no outgoing links, then transition_model returns a probability
    # distribution that chooses randomly among all pages with equal probability.
    if len(links) == 0:
        for link in corpus:
            d[link] = damping_factor / len(corpus)
    # With probability damping_factor, the random surfer should randomly
    # choose one of the links from page with equal probability.
    for link in links:
        d[link] = (damping_factor / len(links))
    # With probability 1 - damping_factor, the random surfer should
    # randomly choose one of all pages in the corpus with equal probability.
    for link in corpus:
        d[link] = d.get(link,0) + random_prob

    return d

# print(transition_model({"1.html": {"2.html", "3.html"}, "2.html": {"3.html"}, "3.html": {"2.html"}}, "1.html", 0.15))

# helper function to select a random link based on the probability
def weighted_random_by_dct(dct):
    rand_val = random.random()
    total = 0
    for k, v in dct.items():
        total += v
        if rand_val <= total:
            return k

def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    page_rank = {}
    # The first sample generated by choosing from a page at random.
    random_page = random.choice(list(corpus.keys()))
    prev = transition_model(corpus, random_page, damping_factor)
    page_rank[random_page] = 1

    for i in range(1, n):
        next_page = weighted_random_by_dct(prev)
        prev = transition_model(corpus, next_page, damping_factor)
        page_rank[next_page] = page_rank.get(next_page, 0) + 1

    for link in page_rank.keys():
        page_rank[link] = round(page_rank.get(link) / n, 4)
    return page_rank

# print(sample_pagerank({"1.html": {"2.html", "3.html"}, "2.html": {"3.html"}, "3.html": {"2.html"}}, 0.85, 10000))

def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    page_rank = {}
    length = len(corpus.keys())
    change = True
    # begin by assigning each page a rank of 1 / N
    for link in corpus.keys():
        page_rank[link] = round(1 / length, 4)

    # repeat until no PageRank value changes by more than 0.001
    # between the current rank values and the new rank values.
    while change:
        change = False
        for page in corpus.keys():
            summation = 0
            # consider each possible page "link" that links to page "page"
            for incoming in corpus.keys():
                if page is not incoming and page in corpus[incoming]:
                    num_links = len(corpus[incoming])
                    summation += page_rank[incoming]/ num_links
            new_val = round(((1 - damping_factor) / length) + damping_factor*summation, 4)

            if abs(page_rank[page] - new_val) >= 0.001:
                page_rank[page] = new_val
                change = True

    return page_rank
# print(iterate_pagerank({"1.html": {"2.html", "3.html"}, "2.html": {"3.html"}, "3.html": {"2.html"}}, 0.85))

if __name__ == "__main__":
    main()
